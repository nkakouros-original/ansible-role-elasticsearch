---

- name: Read installed plugins
  command: ./bin/elasticsearch-plugin list
  args:
    chdir: /usr/share/elasticsearch
  register: _elastic_plugin_list_output
  changed_when: false

- name: Format list of installed plugins
  set_fact:
    _elastic_installed_plugins: "{{ _elastic_plugin_list_output.stdout_lines }}"

- name: Remove already installed plugins
  command: ./bin/elasticsearch-plugin remove "{{ plugin.name if plugin is mapping else plugin }}"
  args:
    chdir: /usr/share/elasticsearch
  loop: "{{ elastic_plugins }}"
  loop_control:
    loop_var: _elasticsearch__plugin
  vars:
    plugin: "{{ _elasticsearch__plugin.name
                  if _elasticsearch__plugin is mapping
                  else _elasticsearch__plugin
             }}"
  register: _result
  failed_when:
    - _result is failed
    - _result.stderr is not contains("plugin [" + plugin + "] not found")
    # This check is needed mostly when the installation is new. In this case the
    # `_elastic_update_or_install` var will be `changed` but no plugins will be
    # installed. If ES was updated, the plugins will be present and the task
    # will not (normally) fail, unless the user has added a new plugin.
    # ES plugins must be installed for specific major/minor ES versions and they
    # need to be removed and re-added to be updated to newer versions. ES must
    # also be restarted after the update.
  when:
    - _elastic_update_or_install | d({}) is changed  # using a default if install was skipped
    - plugin in _elastic_installed_plugins
  notify: elastic-restart-service

- name: Install elasticsearch plugins
  shell: >-
    set -o pipefail;
    echo 'y' | bin/elasticsearch-plugin install "{{ plugin }}"
  args:
    chdir: /usr/share/elasticsearch
  loop: "{{ elastic_plugins }}"
  loop_control:
    loop_var: _elasticsearch__plugin
  vars:
    plugin: "{{ _elasticsearch__plugin.name
                  if _elasticsearch__plugin is mapping
                  else _elasticsearch__plugin
             }}"
  when: _elastic_update_or_install | d({}) is changed
        or plugin not in _elastic_installed_plugins
  notify: elastic-restart-service

- name: Update elastic_config with mandatory plugins
  set_fact:
    elastic_combined_config: >-
      {{
        _elastic_mandatory_plugins
        | combine(elastic_combined_config, recursive=true)
      }}
  when: elastic_plugins | length > 0
  vars:
    _elastic_mandatory_plugins:
      plugin:
        mandatory: "{{ elastic_plugins
                       | select('mapping')
                       | selectattr('mandatory', 'true')
                       | map(attribute='name')
                       | join(',')
                     }}"
